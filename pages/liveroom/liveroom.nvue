<template>
	<view class="page">

		<live-pusher id="livePusher" ref="livePusher" class="livePusher" :url="src" :mode="mode" :enable-camera="enableCamera"
		 :auto-focus="true" :device-position="position" :beauty="beauty" :whiteness="whiteness" aspect="9:16" @statechange="statechange"
		 @netstatus="netstatus" @error="error" :style="'height:'+windowHeight+'px;'" style="width: 750rpx;"></live-pusher>

		<!-- 头部 -->
		<view style="position: fixed;left: 0;right: 0;" :style="'top:'+statusBarHeight+'px'">
			<!-- 个人信息|观看详细信息 -->
			<view style="height: 80rpx;" class="px-2 flex justify-between align-center">
				<view style="width: 325rpx;background-color: rgba(0,0,0,0.4);" class="flex rounded-circle">
					<view class="p">
						<image :src="user.avatar||'/static/deavatar.jpg'" style="width: 70rpx;height: 70rpx;" class="rounded-circle"></image>
					</view>
					<view class="flex-1 flex flex-column justify-center">
						<text class="text-white font">{{user.nickname||user.username}}</text>
						<text class="text-white font-sm">{{detail.look_count}}</text>
					</view>
					<view class="p">
						<view class="rounded-circle flex align-center justify-center bg-danger" style="width: 70rpx;height: 70rpx;">
							<text class="text-white">+</text>
						</view>
					</view>
				</view>

				<!-- 观众头像 -->
				<view style="width: 325rpx;background-color: rgba(0,0,0,0.4);" class="flex rounded-circle">
					<scroll-view scroll-x="true" class="flex-1 flex">
						<view class="p" v-for="(item,index) in list" :key="index">
							<image :src="item.avatar||'/static/deavatar.jpg'" style="width: 70rpx;height: 70rpx;" class="rounded-circle"></image>
						</view>
					</scroll-view>
					<view class="p">
						<view class="rounded-circle flex align-center justify-center bg-danger" style="width: 70rpx;height: 70rpx;">
							<text class="text-white font-sm">{{list.length}}</text>
						</view>
					</view>
				</view>
			</view>
			<!-- 金币 -->
			<view style="height: 80rpx;" class="px-2 my-2">
				<view style="width: 325rpx;background-color: rgba(0,0,0,0.4);" class="flex rounded-circle align-center">
					<view class="p">
						<text class="text-warning">金币</text>
					</view>
					<view class="flex-1 flex flex-column justify-center">
						<text class="text-white font">{{detail.coin}}</text>
					</view>
				</view>
			</view>
			<!-- 收到礼物 -->
			<f-gift ref="gift"></f-gift>
		</view>

		<!-- 弹幕 -->
		<f-danmu ref="danmu"></f-danmu>

		<!-- 底部 -->
		<view style="position: fixed;left: 0;bottom: 0;right: 0;height: 120rpx;" class="flex align-center justify-between">
			<view v-for="(item,index) in btns" :key="index" class="flex-1 flex flex-column align-center justify-center" @click="handleBottomEvent(item)">
				<text class="iconfont text-white mb-1" style="font-size: 45rpx;">{{item.icon}}</text>
				<text class="text-white font my-1">{{item.name}}</text>
			</view>
		</view>

		<!-- 弹出层 -->
		<uni-popup type="bottom" ref="popup">
			<view class="bg-white">
				<view class="flex align-center justify-center border-bottom" style="height: 90rpx;">
					<text class="font-md">{{popupTitle}}</text>
				</view>
				<!-- 中间部分 -->
				<!-- 画质选择 -->
				<view v-if="popupType==='mode'">
					<view v-for="(item,index) in modeList" class="flex align-center justify-center py-2" :class="mode===item.type?'bg-main':''"
					 @click="chooseMode(item)">
						<text class="font-md" :class="mode===item.type?'text-white':''">{{item.desc}}</text>
					</view>
				</view>
				<!-- 美颜美白 -->
				<view v-else-if="popupType === 'beauty'">
					<slider :min="0" :max="9" :step="1" :value="beauty" :block-size="18" show-value @change="handelSliderChange" />
				</view>
				<view v-else-if="popupType === 'whiteness'">
					<slider :min="0" :max="9" :step="1" :value="whiteness" :block-size="18" show-value @change="handelSliderChange" />
				</view>
				<!-- 更多 -->
				<view v-else class="flex align-start justify-start">
					<view class="flex flex-column align-center justify-center" style="width: 150rpx;height: 150rpx;" @click="pauseOrplay">
						<text class="iconfont mb-1">&#xe61f;</text>
						<text class="font">{{isPause?'继续':'暂停'}}</text>
					</view>
					<view class="flex flex-column align-center justify-center" style="width: 150rpx;height: 150rpx;" @click="quit">
						<text class="iconfont mb-1">&#xe60a;</text>
						<text class="font">退出</text>
					</view>
				</view>
				<view class="f-divider"></view>
				<view class="flex align-center justify-center" style="height: 90rpx;" hover-class="bg-light" @click="closePopup">
					<text class="font-md">取消</text>
				</view>
			</view>
		</uni-popup>
	</view>
</template>

<script>
	import fGift from '@/components/live/f-gift.vue';
	import uniPopup from "@/components/uni-ui/uni-popup/uni-popup.vue"
	import fDanmu from "@/components/live/f-danmu.vue"
	import $C from "@/common/js/config.js"
	import {
		mapState
	} from "vuex"
	export default {
		components: {
			fGift,
			uniPopup,
			fDanmu
		},
		data() {
			return {
				statusBarHeight: 0,
				mode: 'SD', // 视频模式：标清
				enableCamera: true, // 开启摄像头
				position: 'front', // 前置(front)还是后置(back)摄像头 
				beauty: 0, // 美颜： 0-9
				whiteness: 0, // 美白 0-9
				windowHeight: 0,
				context: null,

				modeList: [{
					type: 'SD',
					desc: '标清'
				}, {
					type: 'HD',
					desc: '高清'
				}, {
					type: 'FHD',
					desc: '超清'
				}],
				popupType: 'mode',

				btns: [{
					name: '翻转',
					icon: '\ue608',
					event: 'switchCamera'
				}, {
					name: '画质',
					icon: '\ue670',
					event: 'openPopup',
					params: 'mode'
				}, {
					name: '美颜',
					icon: '\ue7c1',
					event: 'openPopup',
					params: 'beauty'
				}, {
					name: '美白',
					icon: '\ue631',
					event: 'openPopup',
					params: 'whiteness'
				}, {
					name: '更多',
					icon: '\ue672',
					event: 'openPopup',
					params: 'more'
				}],

				sign: '',
				detail: {
					"created_time": "",
					"id": 0,
					"title": "",
					"cover": "",
					"user_id": 0,
					"look_count": 0,
					"coin": 0,
					"key": "",
					"status": 0,
					"userId": 0,
					"user": {
						"avatar": "",
						"id": 0,
						"username": ""
					}
				},
				list: [], // 观众数组
				isStart: false, // 是否开始推流
				isPause: false, // 是否暂停

				isget: false, // 
			}
		},
		computed: {
			...mapState({
				user: state => state.user,
				socket: state => state.socket,
				token: state => state.token,
			}),
			popupTitle() {
				let o = {
					mode: '画质',
					beauty: '美颜',
					whiteness: '美白',
					more: '更多'
				}
				return o[this.popupType]
			},
			src() {
				if (this.detail.key === '' || this.sign === '') {
					return ''
				}
				// console.log($C.livePlayBaseUrl + `/${this.detail.key}.flv?sign=${this.sign}`);
				return $C.livePushBaseUrl + `/${this.detail.key}.flv?sign=${this.sign}`
			}
		},
		created() {
			let res = uni.getSystemInfoSync()
			this.statusBarHeight = res.statusBarHeight
			this.windowHeight = res.windowHeight

			// 监听观众改变 | 弹幕发送
			uni.$on('live', this.handleLiveEvent)
		},
		onLoad(e) {
			if (e.options) {
				const options = JSON.parse(e.options)
				this.mode = options.mode
				this.position = options.position
				this.beauty = options.beauty
				this.whiteness = options.whiteness
			}
			if (e.data) {
				let d = JSON.parse(decodeURIComponent(e.data))
				this.detail = d.data
				this.sign = d.sign
			}
		},
		onReady() {
			this.context = uni.createLivePusherContext('livePusher', this)
			// 开启预览
			this.startPreview()
			// 开始推流
			this.start()
		},
		mounted() {
			// 加入直播间
			this.joinOrLeaveLive('join');
		},
		destroyed() {
			// 离开直播间
			this.joinOrLeaveLive('leave');
			uni.$off('live', this.handleLiveEvent)
		},
		onBackPress() {
			if (!this.isget) {
				this.quit();
				return true;
			}
		},
		methods: {
			// 开始推流
			start() {
				this.context.start({
					success: () => {
						this.isStart = true
						$H.post('/live/changestatus', {
							id: this.detail.id,
							type: "play"
						}, {
							token: true
						}).then(res => {
							console.log('开启成功');
							this.joinOrLeaveLive('join') // 防止短线，如果没断线它就不会重新加入，可以放心使用
						}).catch(err => {
							console.log('开始推流失败' + err);
						})
					},
					fail: (err) => {
						console.log("livePusher.start:fail" + JSON.stringify(err));
					}
				})
			},
			// 暂停推流
			pause() {
				this.context.pause({
					success: () => {
						this.isPause = true
						$H.post('/live/changestatus', {
							id: this.detail.id,
							type: "pause"
						}, {
							token: true
						})
					}
				})
			},
			// 继续推流
			resume() {
				this.context.resume({
					success: () => {
						this.isPause = false
						$H.post('/live/changestatus', {
							id: this.detail.id,
							type: "play"
						}, {
							token: true
						})
					}
				})
			},
			// 停止推流
			stop() {
				this.context.stop({
					success: () => {
						this.isStart = false
						$H.post('/live/changestatus', {
							id: this.detail.id,
							type: "stop"
						}, {
							token: true
						})
					}
				})
			},
			// 暂停|继续按钮
			pauseOrplay() {
				if (!this.isPause) {
					return uni.showModal({
						content: '是否暂停推流',
						success: function(res) {
							if (res.cancel) {
								return;
							}
							this.pause()
						}
					});
				}
				// 继续推流
				this.resume()
			},

			// 退出直播间
			quit() {
				uni.showModal({
					content: '是否要退出直播间',
					success: res => {
						if (res.cancel) return;
						this.stop();
						this.isget = true;
						uni.navigateBack({
							delta: 1
						});
						uni.showToast({
							title: '退出直播间成功',
							icon: 'none'
						});
					}
				});
			},
			// 加入或离开直播间  join leave
			joinOrLeaveLive(type) {
				if (this.socket && this.token) {
					this.socket.emit(type + 'Live', {
						live_id: this.id,
						token: this.token
					})
				}
			},
			// 观众改变的回调 | 弹幕发送 | 赠送礼物
			handleLiveEvent(e) {
				let d = e.data;
				// console.log('主播端',d);
				switch (e.type) {
					case 'online':
						if (d.action === 'join') {
							this.list = d.data
						} else {
							const i = this.list.findIndex(item => item.id === d.user.id)
							if (i !== -1) {
								this.list.splice(i, 1)
							}
						}
						break;
					case 'comment':
						this.$refs.danmu.send({
							id: this.$refs.danmu.list.length + 1,
							name: d.user.name,
							content: d.content
						})
						break;
					case 'gift':
						this.$store.dispatch('getUserInfo') // 更新信息
						this.$refs.gift.send(d)
						this.$refs.giftPopup.close()
						break;
					default:
						break;
				}
			},
			handleBottomEvent(item) {
				this[item.event](item.params)
			},
			// 开启预览
			startPreview() {
				this.context.startPreview({
					success: (e) => {
						console.log(e)
					}
				})
			},
			// 直播状态变化
			statechange(e) {

			},
			// 直播网络变化
			netstatus(e) {

			},
			// 发生错误
			error(e) {

			},
			// 切换镜头
			switchCamera() {
				this.context.switchCamera({
					success: (e) => {
						this.position = this.position === 'back' ? 'front' : 'back'
					}
				})
			},
			// 弹出选择画质框
			openPopup(key) {
				this.popupType = key
				this.$refs.popup.open()
			},
			// 画质变更
			chooseMode(item) {
				this.mode = item.type
				uni.showToast({
					title: `画质切换为${item.desc}`,
					icon: 'none'
				});
				this.$refs.popup.close()
			},
			// 美颜美白选项改变
			handelSliderChange(e) {
				this[this.popupType] = e.detail.value
			},
			closePopup() {
				this.$refs.popup.close()
			}
		}
	}
</script>

<style>
	.page {
		flex: 1;
	}

	.btn {
		height: 80rpx;
		border-radius: 100rpx;
		background-color: rgba(255, 255, 255, 0.12);
		align-items: center;
		justify-content: center;
	}

	.btn-icon {
		width: 80rpx;
		margin-right: 20rpx;
	}
</style>
